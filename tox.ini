[tox]
requires = tox-docker

[docker:unstable]
name = unstable
image = redisfab/redis-py:unstable-bionic
ports =
    6379:6379/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',6378)) else False"
volumes =
    bind:rw:{toxinidir}/docker/unstable/redis.conf:/redis.conf

[docker:redis_cluster]
name = redis_cluster
image = redisfab/redis-py-cluster:6.2.6-buster
ports =
    16379:16379/tcp
    16380:16380/tcp
    16381:16381/tcp
    16382:16382/tcp
    16383:16383/tcp
    16384:16384/tcp
healtcheck_cmd = python -c "import socket;print(True) if all([0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',port)) for port in range(16379,16384)]) else False"


[docker:master]
name = master
image = redisfab/redis-py:6.2.6-buster
ports =
    8379:8379/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',8379)) else False"
volumes =
    bind:rw:{toxinidir}/docker/master/redis.conf:/redis.conf


[docker:replica]
name = replica
image = redisfab/redis-py:6.2.6-buster
links =
    master:master
ports =
    8380:8380/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',8380)) else False"
volumes =
    bind:rw:{toxinidir}/docker/replica/redis.conf:/redis.conf


[docker:sentinel_1]
name = sentinel_1
image = redisfab/redis-py-sentinel:6.2.6-buster
links =
    master:master
ports =
    26379:26379/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',26379)) else False"
volumes =
    bind:rw:{toxinidir}/docker/sentinel_1/sentinel.conf:/sentinel.conf

[docker:sentinel_2]
name = sentinel_2
image = redisfab/redis-py-sentinel:6.2.6-buster
links =
    master:master
ports =
    26380:26380/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',26380)) else False"
volumes =
    bind:rw:{toxinidir}/docker/sentinel_2/sentinel.conf:/sentinel.conf

[docker:sentinel_3]
name = sentinel_3
image = redisfab/redis-py-sentinel:6.2.6-buster
links =
    master:master
ports =
    26381:26381/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',26381)) else False"
volumes =
    bind:rw:{toxinidir}/docker/sentinel_3/sentinel.conf:/sentinel.conf


[testenv]
deps =
    -r {toxinidir}/requirements.txt
docker =
    unstable
    redis_cluster
    master
    replica
    sentinel_1
    sentinel_2
    sentinel_3
commands =
    pytest --cov=./ --cov-report=xml:coverage.xml -W always tests/test_redis tests/test_cluster tests/test_sentinel
